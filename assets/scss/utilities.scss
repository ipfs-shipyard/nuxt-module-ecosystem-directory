// ///////////////////////////////////////////////////////////////////// Imports
// -----------------------------------------------------------------------------
@import 'variables';
@import 'settings';

// ////////////////////////////////////////////////////////////////////// Mixins
// --------------------------------------------------------------------- General
@mixin optional-at-root($sel) { @at-root #{if(not &, $sel, selector-append(&, $sel))} { @content; } }
@mixin placeholder {
  @include optional-at-root('::-webkit-input-placeholder') { @content; }
  @include optional-at-root(':-moz-placeholder') { @content; }
  @include optional-at-root('::-moz-placeholder') { @content; }
	@include optional-at-root(':-ms-input-placeholder') { @content; }
	@include optional-at-root('::-ms-input-placeholder') { @content; }
  @include optional-at-root('::placeholder') { @content; }
}

// --------------------------------------------------------------- Media Queries
@mixin tiny { @media screen and (max-width: $breakpoint_Tiny) { @content; } }
@mixin mini { @media screen and (max-width: $breakpoint_Mini) { @content; } }
@mixin small { @media screen and (max-width: $breakpoint_Small) { @content; } }
@mixin medium { @media screen and (max-width: $breakpoint_Medium) { @content; } }
@mixin large { @media screen and (max-width: $breakpoint_Large) { @content; } }
@mixin xlarge { @media screen and (max-width: $breakpoint_Xlarge) { @content; } }
@mixin ultraLarge { @media screen and (max-width: $breakpoint_UltraLarge) { @content; } }

@mixin containerMaxMQ { @media screen and (max-width: $containerWidth) { @content; } }
@mixin containerMinMQ { @media screen and (max-width: $containerWidthPlusOnePixel) { @content; } }
@mixin customMaxMQ($width) { @media screen and (max-width: $width) { @content; } }
@mixin customMinMQ($width) { @media screen and (min-width: $width) { @content; } }

@mixin FireFox {
  @-moz-document url-prefix() { @content; }
}

@mixin Edge {
  @supports (-ms-ime-align:auto) { @content; }
}

@mixin Safari9 {
  @supports (overflow:-webkit-marquee) and (justify-content:inherit) { @content; }
}

@mixin Safari7Plus($item) {
  _::-webkit-full-page-media, _:future, :root #{$item} { @content; }
}

@mixin Safari9Plus($item) {
  _:default:not(:root:root), #{$item} { @content; }
}

@mixin IE10and11 {
  @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) { @content; }
}

@mixin iOSonly {
  @supports (-webkit-overflow-scrolling: touch) { @content; }
}

@mixin everythingExceptIOS {
  @supports not (-webkit-overflow-scrolling: touch) { @content; }
}

// ------------------------------------------------------ Typography | Font Size
@mixin fontSize_Mini { font-size: $fontSize_Mini; }
@mixin fontSize_Small { font-size: $fontSize_Small; }
@mixin fontSize_Regular { font-size: $fontSize_Regular; }
@mixin fontSize_Medium { font-size: $fontSize_Medium; }
@mixin fontSize_Large { font-size: $fontSize_Large; }
@mixin fontSize_ExtraLarge { font-size: $fontSize_ExtraLarge; }
@mixin fontSize_ExtraMediumLarge { font-size: $fontSize_ExtraMediumLarge; }
@mixin fontSize_ExtraExtraLarge { font-size: $fontSize_ExtraExtraLarge; }

// -------------------------------------------------------- Typography | Leading
@mixin leading_Tiny { line-height: $leading_Tiny; }
@mixin leading_Mini { line-height: $leading_Mini; }
@mixin leading_Small { line-height: $leading_Small; }
@mixin leading_Regular { line-height: $leading_Regular; }
@mixin leading_Medium { line-height: $leading_Medium; }
@mixin leading_Large { line-height: $leading_Large; }
@mixin leading_ExtraLarge { line-height: $leading_ExtraLarge; }
@mixin leading_ExtraExtraLarge { line-height: $leading_ExtraExtraLarge; }

// --------------------------------------------------------------------- Styling
@mixin borderRadius_Small { border-radius: $borderRadius_Small; }
@mixin borderRadius_Medium { border-radius: $borderRadius_Medium; }
@mixin borderRadius_Large { border-radius: $borderRadius_Large; }

@mixin highlight {
  color: black;
  font-weight: 700;
}

@mixin focus_BoxShadow_Small {
  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.5);
}

@mixin focus_BoxShadow_Regular {
  box-shadow: 0 0 0 5px rgba(0, 123, 255, 0.5);
}

// ------------------------------------------------------------------- Animation
@mixin animation ($animate...) {
  $max: length($animate);
  $animations: '';
  @for $i from 1 through $max {
    $animations: #{$animations + nth($animate, $i)};
    @if $i < $max { $animations: #{$animations + ", "}; }
  }
  -webkit-animation: $animations;
  -moz-animation:    $animations;
  -o-animation:      $animations;
  animation:         $animations;
}

@mixin animationName($animationName) { -webkit-animation-name: $animationName; animation-name: $animationName; } // string
@mixin animationDuration($animationDuration) { -webkit-animation-duration: $animationDuration; animation-duration: $animationDuration; } // num in ms or s
@mixin animationDirection($animationDirection) { -webkit-animation-direction: $animationDirection; animation-direction: $animationDirection; } // 'normal', 'reverse', 'alternate', 'alternate-reverse'
@mixin animationDelay($animationDelay) { -webkit-animation-delay: $animationDelay; animation-delay: $animationDelay; }
@mixin animationIterationCount($animationIterationCount) { -webkit-animation-iteration-count: $animationIterationCount; animation-iteration-count: $animationIterationCount; } // num or 'infinite'
@mixin animationTimingFunction($animationTimingFunction) { -webkit-animation-timing-function: $animationTimingFunction; animation-timing-function: $animationTimingFunction; } // bezier curve or 'linear'
@mixin animationFillMode($animationFillMode) { -webkit-animation-fill-mode: $animationFillMode; animation-fill-mode: $animationFillMode; } // forwards or backwards or both

@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} { @content; }
  @-moz-keyframes #{$animationName} { @content; }
  @-o-keyframes #{$animationName} { @content; }
  @keyframes #{$animationName} { @content; }
}

@mixin transform($transforms) {
	   -moz-transform: $transforms;
	     -o-transform: $transforms;
	    -ms-transform: $transforms;
	-webkit-transform: $transforms;
          transform: $transforms;
}

@mixin transformOrigin($transformOrigin) {
	   -moz-transform-origin: $transformOrigin;
	     -o-transform-origin: $transformOrigin;
	    -ms-transform-origin: $transformOrigin;
	-webkit-transform-origin: $transformOrigin;
          transform-origin: $transformOrigin;
}
